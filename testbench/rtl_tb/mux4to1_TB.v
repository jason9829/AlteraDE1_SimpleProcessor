module mux4to1_tb();

    /*
    reg is used for inputs because these signals are generated by your testbench a
    nd are driven by a procedural block (in this case, the initial block). 
    The reg keyword is needed here because the values assigned to these signals persist until a new assignment is made.

    wire is used for outputs because these signals are driven by the module under test. 
    The module will continuously drive these signals with the results of its computations, so no storage is needed.
    */
    parameter size = 8;
    reg S0, S1;

    reg [size-1:0] i0, i1, i2, i3;


    wire [size-1:0] out;

    mux4to1 #(size) inst1(
        .S0(S0),
        .S1(S1),
        .i0(i0),
        .i1(i1),
        .i2(i2),
        .i3(i3),
        .out(out)
    );

        // VCD generation
    initial begin
        $dumpfile("waveform.vcd");
        $dumpvars(0, mux4to1_tb);
    end


    initial begin
        // Init
        S0 = 0;
        S1 = 0;
        i0 = 0;
        i1 = 0;
        i2 = 0;
        i3 = 0;
        #10;

        // Select i0
        S0 = 0;
        S1 = 0;
        i0 = 8'hF0;
        i1 = 8'hF1;
        i2 = 8'hF2;
        i3 = 8'hF3;
        #10;

        // Select i1
        S0 = 1;
        S1 = 0;
        i0 = 8'hF0;
        i1 = 8'hF1;
        i2 = 8'hF2;
        i3 = 8'hF3;
        #10;

        // Select i2
        S0 = 0;
        S1 = 1;
        i0 = 8'hF0;
        i1 = 8'hF1;
        i2 = 8'hF2;
        i3 = 8'hF3;
        #10;


        // Select i3
        S0 = 1;
        S1 = 1;
        i0 = 8'hF0;
        i1 = 8'hF1;
        i2 = 8'hF2;
        i3 = 8'hF3;
        #10;
    end 

endmodule